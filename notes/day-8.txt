.NET 8 SDK CLI (Command Line Interface) tool: dotnet

command to print the list of .NET SDKs installed in your machine
>dotnet --list-sdks

1. create an app:
>dotnet new -> command to create new application
>dotnet new --list (list of all types of application)

new console app using .net8
>dotnet new console --name FirstApp -f net8.0

new class library app using .net8
>dotnet new classlib --name FirstApp -f net8.0

2. compile app: (classlib or console app)
you are in the project folder =>

>dotnet build 

3. run the app:
you are in the project folder =>

>dotnet run


4. add reference
	a. Project reference: add reference to an existing csproj file
	>donet add reference <project-file-path (relative)>
	example:
	SampleClientApp adding reference to SampleLibrary.csproj file
	you are in the SampleClientApp project folder =>
	>dotnet add reference ..\SampleLibrary\SampleLibrary.csproj

	b. Package Reference: add reference to a built-in library (package)
	>dotnet add package <package-name>
	example: >dotnet add package Microsoft.Data.SqlClient --version 6.0.0

Design Principles in C#:
--------------------------------
SOLID principle
	a. S => Single Responsibilty Principle (SRP)
		Every software module has only one reason to change

	b. O => Open Closed Principle (OCP)
		a s/w module or class is open for extension and closed for modification.

	c. L => Liskov Substitution Principle (LSP)
		you should be able to use any derived class instead of a parent class and make it behave in the same manner without modification.
		[a derived class must be substitutable for its base class]

	d. I => Interface Segregation Principle (ISP)
		any client should not be forced to implement interfaces that they don't want to use. Instead of a large interface, it is preferred to create many small interfaces, based on groups of methods, each serving one purpose (module -> class)
	
	e. D => Dependency Inversion Principle (DIP)
		high-level modules/classes should not depend upon the low-level modules/classes directly. First of all, both (high and low-level modules/classes) should reply upon abstractions. (this creates loose coupling between them). Finally, details should rely upon abstractions too.
		Interface plays main role in providing that abstraction between both the parties and thus provides loose coupling between both the parties.


UserService class instance depends on an instance of EmailService class
UserService instance => dependent
EmailService instance => dependency factor

Dependent entities will suffer because of...
a. if name of dependency factor changes
b. if dependency factor architecture changes (such as the class becomes abstract with extra child classes)
c. if constructor of dependency factor throws exception

You have to re-write the code in dependents even sometimes

this situation where any change or issue in dependency factor forces the dependent entities to change is known as "tight coupling".

loose coupling is the answer to the previous problem


singleton design pattern: design pattern to create single instance of an entity

interfaces:

SqlFile 	ReadOnlySqlFile
readtext()	readtext()
savetext()	




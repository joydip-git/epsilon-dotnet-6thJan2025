.net framework vs .NET (rebranded version of .NET Core Framework)

project/app structure:
	app-name (folder)
		app-name (project folder)
			app-name.csproj (C# project file)
			class-file.cs
			bin (folder) => output directory
			obj (folder)
		app-name.sln


executable app: console app

Program.cs
namespace app-name
{
	class Program
	{
		static void Main(string[] args)
		{
			//local variable
			byte numValue = 100;
		}
	}	
}

ctrl K+D => formatting
Ctrl K+C => commenting a line/s
Ctrl K+U => uncommenting a line/s


class and object:
-----------------------------
class Person
{
	int id;
	string name;
	long mobile;
}

 new Person()
 new Person()

1. look at Person class
2. find out how many "data members" are present
3. allocate memory block for them in "heap" region
4. assign default values to them (until the proper values are assigned) using constructor function
	

instance

id = 1001
name = joydip
mobile = 909090...

instance

id= 1002
name = karthik
mobile = 909091....

class => blueprint for objects

namespace namespace-name
{
	class class-name
	{
		data-type data-member-name1;
		data-type data-member-name2;
		...
		data-type data-member-nameN;

		public class-name(){}

		public class-name(data-type arg1, data-type arg2, ..., data-type 		argN)
		{ 
			data-member-name1 = arg1;
			data-member-name2 = arg2;
			.....
			data-member-nameN = argN;
		}

		public static void M1(){}
		public void M2(){}
	}
}

class-name ref-var-name = new class-name-ctor(args...);
ref-var-name.M2();
class-name.M1();

methods of class => static and non-static (instance)

Read() => anil => a => 65
ReadKey() => 
ReadLine() => anil => "anil"
	   => 100  => "100" => int.Parse()

operators: 
crireria: operation being performed
	a. arithmetic: +, -, /, *, %

	b. relational: ==, !=, >, <, >=, <=

	c. logical: logical AND (&&) and logical OR (||) and logical NOT (!)
	bool a=true; a, !a

	d. bitwise: bitwise AND (&), bitwise OR (|), bitwise XOR (^), bitwise complement (~), left shift (<<), right shift (>>)

	e. assignment: = (simple), += (add), -= (subtract), *= (multiply), /= (divide), %= (modulus), >>= (right shift), <<= (bitiwse left shift) &= (bitwise AND),  |= (bitiwise OR), ^= (bitwise exclusive)
	int a = 10;

	f. conditional: condition? first_expression:second_expression;

criteria: number of operands
	a. unary: ++ (increment), -- (decrement)
	int a = 10; a++; (a = a+1) ++a;
	a--, --a;
	b. binary: aritmetic
	c. ternary: conditional operator (?:)
	
control flow statements:
	a. selection statements: uses branching in code to decide which code to execute based on some condition
	if, if...else, switch...case

	b. iteration statements:
	uses looping to control the flow of a program
	for, while, do..while, foreach

	c. jump statements: break, continue, return, goto
	




